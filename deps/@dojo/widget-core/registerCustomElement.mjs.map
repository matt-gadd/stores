{"version":3,"file":"registerCustomElement.mjs","sourceRoot":"","sources":["../../src/registerCustomElement.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,gBAAgB,EAA2B,sBAAsB,EAAE,iBAAiB,EAAE,MAAM,kBAAkB,CAAC;AAgBxH;;;;;;GAMG;AACH,MAAM,gCAAgC,iBAAiD;IACtF,MAAM,UAAU,GAAG,iBAAiB,EAAE,CAAC;IAEvC,cAAc,CAAC,MAAM,CACpB,UAAU,CAAC,OAAO,EAClB,KAAM,SAAQ,WAAW;QAKxB;YACC,KAAK,EAAE,CAAC;YALD,gBAAW,GAAG,KAAK,CAAC;YAO3B,IAAI,CAAC,SAAS,GAAG,iBAAiB,CAAC,IAAI,CAAC,CAAC;QAC1C,CAAC;QAEM,iBAAiB;YACvB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;gBACvB,IAAI,CAAC,SAAS,EAAE,CAAC;gBACjB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;gBACxB,IAAI,CAAC,aAAa,CACjB,IAAI,gBAAgB,CAAC,WAAW,EAAE;oBACjC,OAAO,EAAE,KAAK;iBACd,CAAC,CACF,CAAC;YACH,CAAC;QACF,CAAC;QAEM,wBAAwB,CAAC,IAAY,EAAE,QAAuB,EAAE,QAAuB;YAC7F,sBAAsB,CAAC,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;QACxD,CAAC;QAEM,iBAAiB;YACvB,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;QAC7B,CAAC;QAEM,iBAAiB,CAAC,MAA2B;YACnD,IAAI,CAAC,eAAe,GAAG,MAAM,CAAC;QAC/B,CAAC;QAEM,oBAAoB;YAC1B,MAAM,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC,iBAAiB,CAAC;QAC/C,CAAC;QAEM,aAAa;YACnB,MAAM,CAAC,UAAU,CAAC;QACnB,CAAC;QAED,MAAM,KAAK,kBAAkB;YAC5B,MAAM,CAAC,CAAC,UAAU,CAAC,UAAU,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,SAAS,CAAC,aAAa,CAAC,WAAW,EAAE,CAAC,CAAC;QAChG,CAAC;KACD,CACD,CAAC;AACH,CAAC;AAED,eAAe,qBAAqB,CAAC","sourcesContent":["import { customEventClass, CustomElementDescriptor, handleAttributeChanged, initializeElement } from './customElements';\nimport { Constructor, WidgetProperties } from './interfaces';\nimport { WidgetBase } from './WidgetBase';\nimport { ProjectorMixin } from './mixins/Projector';\n\ndeclare namespace customElements {\n\tfunction define(name: string, constructor: any): void;\n}\n\n/**\n * Describes a function that returns a CustomElementDescriptor\n */\nexport interface CustomElementDescriptorFactory {\n\t(): CustomElementDescriptor;\n}\n\n/**\n * Register a custom element using the v1 spec of custom elements. Note that\n * this is the default export, and, expects the proposal to work in the browser.\n * This will likely require the polyfill and native shim.\n *\n * @param descriptorFactory\n */\nexport function registerCustomElement(descriptorFactory: CustomElementDescriptorFactory) {\n\tconst descriptor = descriptorFactory();\n\n\tcustomElements.define(\n\t\tdescriptor.tagName,\n\t\tclass extends HTMLElement {\n\t\t\tprivate _isAppended = false;\n\t\t\tprivate _appender: Function;\n\t\t\tprivate _widgetInstance: ProjectorMixin<any>;\n\n\t\t\tconstructor() {\n\t\t\t\tsuper();\n\n\t\t\t\tthis._appender = initializeElement(this);\n\t\t\t}\n\n\t\t\tpublic connectedCallback() {\n\t\t\t\tif (!this._isAppended) {\n\t\t\t\t\tthis._appender();\n\t\t\t\t\tthis._isAppended = true;\n\t\t\t\t\tthis.dispatchEvent(\n\t\t\t\t\t\tnew customEventClass('connected', {\n\t\t\t\t\t\t\tbubbles: false\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpublic attributeChangedCallback(name: string, oldValue: string | null, newValue: string | null) {\n\t\t\t\thandleAttributeChanged(this, name, newValue, oldValue);\n\t\t\t}\n\n\t\t\tpublic getWidgetInstance(): ProjectorMixin<any> {\n\t\t\t\treturn this._widgetInstance;\n\t\t\t}\n\n\t\t\tpublic setWidgetInstance(widget: ProjectorMixin<any>): void {\n\t\t\t\tthis._widgetInstance = widget;\n\t\t\t}\n\n\t\t\tpublic getWidgetConstructor(): Constructor<WidgetBase<WidgetProperties>> {\n\t\t\t\treturn this.getDescriptor().widgetConstructor;\n\t\t\t}\n\n\t\t\tpublic getDescriptor(): CustomElementDescriptor {\n\t\t\t\treturn descriptor;\n\t\t\t}\n\n\t\t\tstatic get observedAttributes(): string[] {\n\t\t\t\treturn (descriptor.attributes || []).map((attribute) => attribute.attributeName.toLowerCase());\n\t\t\t}\n\t\t}\n\t);\n}\n\nexport default registerCustomElement;\n"]}