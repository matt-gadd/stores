{"version":3,"file":"inject.mjs","sourceRoot":"","sources":["../../../src/decorators/inject.ts"],"names":[],"mappings":"AAAA,OAAO,OAAO,MAAM,oBAAoB,CAAC;AAEzC,OAAO,EAAE,eAAe,EAAE,MAAM,mBAAmB,CAAC;AAEpD,OAAO,EAAE,gBAAgB,EAAE,MAAM,oBAAoB,CAAC;AAGtD;;GAEG;AACH,MAAM,sBAAsB,GAAoC,IAAI,OAAO,EAAE,CAAC;AA0B9E;;;;;;GAMG;AACH,MAAM,iBAAiB,EAAE,IAAI,EAAE,aAAa,EAAgB;IAC3D,MAAM,CAAC,eAAe,CAAC,CAAC,MAAM,EAAE,WAAW,EAAE,EAAE;QAC9C,gBAAgB,CAAC,UAA2B,UAAe;YAC1D,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;YACjD,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;gBACd,MAAM,mBAAmB,GAAG,sBAAsB,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC;gBACnE,EAAE,CAAC,CAAC,mBAAmB,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;oBACtC,sBAAsB,CAAC,GAAG,CAAC,IAAI,EAAE,mBAAmB,CAAC,CAAC;gBACvD,CAAC;gBACD,EAAE,CAAC,CAAC,mBAAmB,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;oBAClD,QAAQ,CAAC,EAAE,CAAC,YAAY,EAAE,GAAG,EAAE;wBAC9B,IAAI,CAAC,UAAU,EAAE,CAAC;oBACnB,CAAC,CAAC,CAAC;oBACH,mBAAmB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACpC,CAAC;gBACD,MAAM,CAAC,aAAa,CAAC,QAAQ,CAAC,GAAG,EAAE,EAAE,UAAU,CAAC,CAAC;YAClD,CAAC;QACF,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;IACZ,CAAC,CAAC,CAAC;AACJ,CAAC;AAED,eAAe,MAAM,CAAC","sourcesContent":["import WeakMap from '@dojo/shim/WeakMap';\nimport { WidgetBase } from './../WidgetBase';\nimport { handleDecorator } from './handleDecorator';\nimport { Injector } from './../Injector';\nimport { beforeProperties } from './beforeProperties';\nimport { RegistryLabel } from './../interfaces';\n\n/**\n * Map of instances against registered injectors.\n */\nconst registeredInjectorsMap: WeakMap<WidgetBase, Injector[]> = new WeakMap();\n\n/**\n * Defines the contract requires for the get properties function\n * used to map the injected properties.\n */\nexport interface GetProperties<T = any> {\n\t(payload: any, properties: T): T;\n}\n\n/**\n * Defines the inject configuration required for use of the `inject` decorator\n */\nexport interface InjectConfig {\n\t/**\n\t * The label of the registry injector\n\t */\n\tname: RegistryLabel;\n\n\t/**\n\t * Function that returns propertues to inject using the passed properties\n\t * and the injected payload.\n\t */\n\tgetProperties: GetProperties;\n}\n\n/**\n * Decorator retrieves an injector from an available registry using the name and\n * calls the `getProperties` function with the payload from the injector\n * and current properties with the the injected properties returned.\n *\n * @param InjectConfig the inject configuration\n */\nexport function inject({ name, getProperties }: InjectConfig) {\n\treturn handleDecorator((target, propertyKey) => {\n\t\tbeforeProperties(function(this: WidgetBase, properties: any) {\n\t\t\tconst injector = this.registry.getInjector(name);\n\t\t\tif (injector) {\n\t\t\t\tconst registeredInjectors = registeredInjectorsMap.get(this) || [];\n\t\t\t\tif (registeredInjectors.length === 0) {\n\t\t\t\t\tregisteredInjectorsMap.set(this, registeredInjectors);\n\t\t\t\t}\n\t\t\t\tif (registeredInjectors.indexOf(injector) === -1) {\n\t\t\t\t\tinjector.on('invalidate', () => {\n\t\t\t\t\t\tthis.invalidate();\n\t\t\t\t\t});\n\t\t\t\t\tregisteredInjectors.push(injector);\n\t\t\t\t}\n\t\t\t\treturn getProperties(injector.get(), properties);\n\t\t\t}\n\t\t})(target);\n\t});\n}\n\nexport default inject;\n"]}