{"version":3,"file":"customElement.js","sourceRoot":"","sources":["customElement.ts"],"names":[],"mappings":";;;;;;;;;;;IAiCA;;;OAGG;IACH,uBAA6E,EAMpD;YALxB,YAAG,EACH,0BAAU,EACV,0BAAU,EACV,kBAAM,EACN,kCAAc;QAEd,MAAM,CAAC,UAAqC,MAAS;YACpD,MAAM,CAAC,SAAS,CAAC,yBAAyB,GAAG;gBAC5C,OAAO,EAAE,GAAG;gBACZ,iBAAiB,EAAE,MAAM;gBACzB,UAAU,EAAE,CAAC,UAAU,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,UAAC,aAAa,IAAK,OAAA,CAAC,EAAE,aAAa,eAAA,EAAE,CAAC,EAAnB,CAAmB,CAAC;gBAC1E,UAAU,EAAE,CAAC,UAAU,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,UAAC,YAAY,IAAK,OAAA,CAAC,EAAE,YAAY,cAAA,EAAE,CAAC,EAAlB,CAAkB,CAAC;gBACxE,MAAM,EAAE,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,UAAC,YAAY,IAAK,OAAA,CAAC;oBAC7C,YAAY,cAAA;oBACZ,SAAS,EAAE,YAAY,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,WAAW,EAAE;iBACvD,CAAC,EAH2C,CAG3C,CAAC;gBACH,cAAc,gBAAA;aACd,CAAC;QACH,CAAC,CAAC;IACH,CAAC;IApBD,sCAoBC;IAED,kBAAe,aAAa,CAAC","sourcesContent":["import { CustomElementInitializer } from '../customElements';\nimport { Constructor, WidgetProperties } from '../interfaces';\n\n/**\n * Defines the custom element configuration used by the customElement decorator\n */\nexport interface CustomElementConfig<P extends WidgetProperties> {\n\t/**\n\t * The tag of the custom element\n\t */\n\ttag: string;\n\n\t/**\n\t * List of widget properties to expose as properties on the custom element\n\t */\n\tproperties?: (keyof P)[];\n\n\t/**\n\t * List of attributes on the custom element to map to widget properties\n\t */\n\tattributes?: (keyof P)[];\n\n\t/**\n\t * List of events to expose\n\t */\n\tevents?: (keyof P)[];\n\n\t/**\n\t * Initialization function called before the widget is created (for custom property setting)\n\t */\n\tinitialization?: CustomElementInitializer;\n}\n\n/**\n * This Decorator is provided properties that define the behavior of a custom element, and\n * registers that custom element.\n */\nexport function customElement<P extends WidgetProperties = WidgetProperties>({\n\ttag,\n\tproperties,\n\tattributes,\n\tevents,\n\tinitialization\n}: CustomElementConfig<P>) {\n\treturn function<T extends Constructor<any>>(target: T) {\n\t\ttarget.prototype.__customElementDescriptor = {\n\t\t\ttagName: tag,\n\t\t\twidgetConstructor: target,\n\t\t\tattributes: (attributes || []).map((attributeName) => ({ attributeName })),\n\t\t\tproperties: (properties || []).map((propertyName) => ({ propertyName })),\n\t\t\tevents: (events || []).map((propertyName) => ({\n\t\t\t\tpropertyName,\n\t\t\t\teventName: propertyName.replace('on', '').toLowerCase()\n\t\t\t})),\n\t\t\tinitialization\n\t\t};\n\t};\n}\n\nexport default customElement;\n"]}