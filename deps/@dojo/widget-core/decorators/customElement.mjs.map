{"version":3,"file":"customElement.mjs","sourceRoot":"","sources":["../../../src/decorators/customElement.ts"],"names":[],"mappings":"AAiCA;;;GAGG;AACH,MAAM,wBAAuE,EAC5E,GAAG,EACH,UAAU,EACV,UAAU,EACV,MAAM,EACN,cAAc,EACU;IACxB,MAAM,CAAC,UAAqC,MAAS;QACpD,MAAM,CAAC,SAAS,CAAC,yBAAyB,GAAG;YAC5C,OAAO,EAAE,GAAG;YACZ,iBAAiB,EAAE,MAAM;YACzB,UAAU,EAAE,CAAC,UAAU,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC,EAAE,aAAa,EAAE,CAAC,CAAC;YAC1E,UAAU,EAAE,CAAC,UAAU,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC,EAAE,YAAY,EAAE,CAAC,CAAC;YACxE,MAAM,EAAE,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;gBAC7C,YAAY;gBACZ,SAAS,EAAE,YAAY,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,WAAW,EAAE;aACvD,CAAC,CAAC;YACH,cAAc;SACd,CAAC;IACH,CAAC,CAAC;AACH,CAAC;AAED,eAAe,aAAa,CAAC","sourcesContent":["import { CustomElementInitializer } from '../customElements';\nimport { Constructor, WidgetProperties } from '../interfaces';\n\n/**\n * Defines the custom element configuration used by the customElement decorator\n */\nexport interface CustomElementConfig<P extends WidgetProperties> {\n\t/**\n\t * The tag of the custom element\n\t */\n\ttag: string;\n\n\t/**\n\t * List of widget properties to expose as properties on the custom element\n\t */\n\tproperties?: (keyof P)[];\n\n\t/**\n\t * List of attributes on the custom element to map to widget properties\n\t */\n\tattributes?: (keyof P)[];\n\n\t/**\n\t * List of events to expose\n\t */\n\tevents?: (keyof P)[];\n\n\t/**\n\t * Initialization function called before the widget is created (for custom property setting)\n\t */\n\tinitialization?: CustomElementInitializer;\n}\n\n/**\n * This Decorator is provided properties that define the behavior of a custom element, and\n * registers that custom element.\n */\nexport function customElement<P extends WidgetProperties = WidgetProperties>({\n\ttag,\n\tproperties,\n\tattributes,\n\tevents,\n\tinitialization\n}: CustomElementConfig<P>) {\n\treturn function<T extends Constructor<any>>(target: T) {\n\t\ttarget.prototype.__customElementDescriptor = {\n\t\t\ttagName: tag,\n\t\t\twidgetConstructor: target,\n\t\t\tattributes: (attributes || []).map((attributeName) => ({ attributeName })),\n\t\t\tproperties: (properties || []).map((propertyName) => ({ propertyName })),\n\t\t\tevents: (events || []).map((propertyName) => ({\n\t\t\t\tpropertyName,\n\t\t\t\teventName: propertyName.replace('on', '').toLowerCase()\n\t\t\t})),\n\t\t\tinitialization\n\t\t};\n\t};\n}\n\nexport default customElement;\n"]}