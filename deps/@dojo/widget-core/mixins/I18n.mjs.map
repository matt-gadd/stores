{"version":3,"file":"I18n.mjs","sourceRoot":"","sources":["../../../src/mixins/I18n.ts"],"names":[],"mappings":"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","sourcesContent":["/* tslint:disable:interface-name */\nimport { assign } from '@dojo/core/lang';\nimport i18n, { Bundle, formatMessage, getCachedMessages, Messages } from '@dojo/i18n/i18n';\nimport { isVNode } from './../d';\nimport { afterRender } from './../decorators/afterRender';\nimport { inject } from './../decorators/inject';\nimport { Constructor, DNode, WidgetProperties, VNodeProperties } from './../interfaces';\nimport { Injector } from './../Injector';\nimport { Registry } from './../Registry';\nimport { WidgetBase } from './../WidgetBase';\n\nexport const INJECTOR_KEY = Symbol('i18n');\n\nexport interface LocaleData {\n\t/**\n\t * The locale for the widget. If not specified, then the root locale (as determined by `@dojo/i18n`) is assumed.\n\t * If specified, the widget's node will have a `lang` property set to the locale.\n\t */\n\tlocale?: string;\n\n\t/**\n\t * An optional flag indicating the widget's text direction. If `true`, then the underlying node's `dir`\n\t * property is set to \"rtl\". If it is `false`, then the `dir` property is set to \"ltr\". Otherwise, the property\n\t * is not set.\n\t */\n\trtl?: boolean;\n}\n\nexport interface I18nProperties extends LocaleData, WidgetProperties {}\n\n/**\n * @private\n * An internal helper interface for defining locale and text direction attributes on widget nodes.\n */\ninterface I18nVNodeProperties extends VNodeProperties {\n\tdir: string | null;\n\tlang: string | null;\n}\n\nexport type LocalizedMessages<T extends Messages> = T & {\n\t/**\n\t * Formats an ICU-formatted message template for the represented bundle.\n\t *\n\t * @param key\n\t * The message key.\n\t *\n\t * @param options\n\t * The values to pass to the formatter.\n\t *\n\t * @return\n\t * The formatted string.\n\t */\n\tformat(key: string, options?: any): string;\n};\n\n/**\n * interface for I18n functionality\n */\nexport interface I18nMixin {\n\t/**\n\t * Return the cached messages for the specified bundle for the current locale, assuming they have already\n\t * been loaded. If the locale-specific messages have not been loaded, they are fetched and the widget state\n\t * is updated.\n\t *\n\t * @param bundle\n\t * The required bundle object for which available locale messages should be loaded.\n\t *\n\t * @return\n\t * The localized messages, along with a `format` method for formatting ICU-formatted templates.\n\t */\n\tlocalizeBundle<T extends Messages>(bundle: Bundle<T>): LocalizedMessages<T>;\n\n\tproperties: I18nProperties;\n}\n\nexport function registerI18nInjector(localeData: LocaleData, registry: Registry): Injector {\n\tconst injector = new Injector(localeData);\n\tregistry.defineInjector(INJECTOR_KEY, injector);\n\treturn injector;\n}\n\nexport function I18nMixin<T extends Constructor<WidgetBase<any>>>(Base: T): T & Constructor<I18nMixin> {\n\t@inject({\n\t\tname: INJECTOR_KEY,\n\t\tgetProperties: (localeData: LocaleData, properties: I18nProperties) => {\n\t\t\tconst { locale = localeData.locale, rtl = localeData.rtl } = properties;\n\t\t\treturn { locale, rtl };\n\t\t}\n\t})\n\tclass I18n extends Base {\n\t\tpublic properties: I18nProperties;\n\n\t\tpublic localizeBundle<T extends Messages>(bundle: Bundle<T>): LocalizedMessages<T> {\n\t\t\tconst { locale } = this.properties;\n\t\t\tconst messages = this._getLocaleMessages(bundle) || bundle.messages;\n\n\t\t\treturn assign(\n\t\t\t\tObject.create({\n\t\t\t\t\tformat(key: string, options?: any) {\n\t\t\t\t\t\treturn formatMessage(bundle, key, options, locale);\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\tmessages\n\t\t\t) as LocalizedMessages<T>;\n\t\t}\n\n\t\t@afterRender()\n\t\tprotected renderDecorator(result: DNode): DNode {\n\t\t\tif (isVNode(result)) {\n\t\t\t\tconst { locale, rtl } = this.properties;\n\t\t\t\tconst properties: I18nVNodeProperties = {\n\t\t\t\t\tdir: null,\n\t\t\t\t\tlang: null\n\t\t\t\t};\n\n\t\t\t\tif (typeof rtl === 'boolean') {\n\t\t\t\t\tproperties['dir'] = rtl ? 'rtl' : 'ltr';\n\t\t\t\t}\n\t\t\t\tif (locale) {\n\t\t\t\t\tproperties['lang'] = locale;\n\t\t\t\t}\n\n\t\t\t\tassign(result.properties, properties);\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\n\t\t/**\n\t\t * @private\n\t\t * Return the cached dictionary for the specified bundle and locale, if it exists. If the requested dictionary does not\n\t\t * exist, then load it and update the instance's state with the appropriate messages.\n\t\t *\n\t\t * @param bundle\n\t\t * The bundle for which to load a locale-specific dictionary.\n\t\t *\n\t\t * @return\n\t\t * The locale-specific dictionary, if it has already been loaded and cached.\n\t\t */\n\t\tprivate _getLocaleMessages(bundle: Bundle<Messages>): Messages | void {\n\t\t\tconst { properties } = this;\n\t\t\tconst locale = properties.locale || i18n.locale;\n\t\t\tconst localeMessages = getCachedMessages(bundle, locale);\n\n\t\t\tif (localeMessages) {\n\t\t\t\treturn localeMessages;\n\t\t\t}\n\n\t\t\ti18n(bundle, locale).then(() => {\n\t\t\t\tthis.invalidate();\n\t\t\t});\n\t\t}\n\t}\n\n\treturn I18n;\n}\n\nexport default I18nMixin;\n"]}