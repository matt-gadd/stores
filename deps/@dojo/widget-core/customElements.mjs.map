{"version":3,"file":"customElements.mjs","sourceRoot":"","sources":["../../src/customElements.ts"],"names":[],"mappings":"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","sourcesContent":["import { assign } from '@dojo/core/lang';\nimport { from as arrayFrom } from '@dojo/shim/array';\nimport global from '@dojo/shim/global';\nimport { Constructor, DNode, VNode, VNodeProperties, WidgetProperties } from './interfaces';\nimport { WidgetBase } from './WidgetBase';\nimport { v, w } from './d';\nimport { DomWrapper } from './util/DomWrapper';\nimport { ProjectorMixin } from './mixins/Projector';\nimport { InternalVNode } from './vdom';\n\n/**\n * @type CustomElementAttributeDescriptor\n *\n * Describes a custom element attribute\n *\n * @property attributeName   The name of the attribute on the DOM element\n * @property propertyName    The name of the property on the widget\n * @property value           A function that takes a string or null value, and returns a new value. The widget's property will be set to the new value.\n */\nexport interface CustomElementAttributeDescriptor {\n\tattributeName: string;\n\tpropertyName?: string;\n\tvalue?: (value: string | null) => any;\n}\n\n/**\n * @type CustomElementPropertyDescriptor\n *\n * Describes a widget property exposed via a custom element\n *\n * @property propertyName        The name of the property on the DOM element\n * @property widgetPropertyName  The name of the property on the widget\n * @property getValue            A transformation function on the widget's property value\n * @property setValue            A transformation function on the DOM elements property value\n */\nexport interface CustomElementPropertyDescriptor {\n\tpropertyName: string;\n\twidgetPropertyName?: string;\n\tgetValue?: (value: any) => any;\n\tsetValue?: (value: any) => any;\n}\n\n/**\n * @type CustomElementEventDescriptor\n *\n * Describes a custom element event\n *\n * @property propertyName    The name of the property on the widget that takes a function\n * @property eventName       The type of the event to emit (it will be a CustomEvent object of this type)\n */\nexport interface CustomElementEventDescriptor {\n\tpropertyName: string;\n\teventName: string;\n}\n\n/**\n * Defines a custom element initializing function. Passes in initial properties so they can be extended\n * by the initializer.\n */\nexport interface CustomElementInitializer {\n\t(properties: WidgetProperties): void;\n}\n\nexport enum ChildrenType {\n\tDOJO = 'DOJO',\n\tELEMENT = 'ELEMENT'\n}\n\n/**\n * @type CustomElementDescriptor\n *\n * Describes a custom element.\n *\n * @property tagName             The tag name to register this widget under. Tag names must contain a \"-\"\n * @property widgetConstructor   widget Constructor that will return the widget to be wrapped in a custom element\n * @property attributes          A list of attributes to define on this element\n * @property properties          A list of properties to define on this element\n * @property events              A list of events to expose on this element\n * @property initialization      A method to run to set custom properties on the wrapped widget\n */\nexport interface CustomElementDescriptor {\n\t/**\n\t * The name of the custom element tag\n\t */\n\ttagName: string;\n\n\t/**\n\t * Widget constructor that will create the widget\n\t */\n\twidgetConstructor: Constructor<WidgetBase<WidgetProperties>>;\n\n\t/**\n\t * List of attributes on the custom element to map to widget properties\n\t */\n\tattributes?: CustomElementAttributeDescriptor[];\n\n\t/**\n\t * List of widget properties to expose as properties on the custom element\n\t */\n\tproperties?: CustomElementPropertyDescriptor[];\n\n\t/**\n\t * List of events to expose\n\t */\n\tevents?: CustomElementEventDescriptor[];\n\n\t/**\n\t * Initialization function called before the widget is created (for custom property setting)\n\t */\n\tinitialization?: CustomElementInitializer;\n\n\t/**\n\t * The type of children that the custom element accepts\n\t */\n\tchildrenType?: ChildrenType;\n}\n\n/**\n * @type CustomElement\n *\n * A custom element extends upon a regular HTMLElement but adds fields for describing and wrapping a widget constructor.\n *\n * @property getWidgetConstructor Return the widget constructor for this element\n * @property getDescriptor        Return the element descriptor for this element\n * @property getWidgetInstance    Return the widget instance that this element wraps\n * @property setWidgetInstance    Set the widget instance for this element\n */\nexport interface CustomElement extends HTMLElement {\n\tgetWidgetConstructor(): Constructor<WidgetBase<WidgetProperties>>;\n\tgetDescriptor(): CustomElementDescriptor;\n\tgetWidgetInstance(): ProjectorMixin<any>;\n\tsetWidgetInstance(instance: ProjectorMixin<any>): void;\n}\n\n/**\n * Properties for DomToWidgetWrapper\n */\nexport type DomToWidgetWrapperProperties = VNodeProperties & WidgetProperties;\n\n/**\n * DomToWidgetWrapper type\n */\nexport type DomToWidgetWrapper = Constructor<WidgetBase<DomToWidgetWrapperProperties>>;\n\n/**\n * DomToWidgetWrapper HOC\n *\n * @param domNode The dom node to wrap\n */\nexport function DomToWidgetWrapper(domNode: CustomElement): DomToWidgetWrapper {\n\treturn class DomToWidgetWrapper extends WidgetBase<DomToWidgetWrapperProperties> {\n\t\tprivate _widgetInstance: ProjectorMixin<any>;\n\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tdomNode.addEventListener('connected', () => {\n\t\t\t\tthis._widgetInstance = domNode.getWidgetInstance();\n\t\t\t\tthis.invalidate();\n\t\t\t});\n\t\t}\n\n\t\tpublic __render__(): VNode {\n\t\t\tconst vNode = super.__render__() as InternalVNode;\n\t\t\tvNode.domNode = domNode;\n\t\t\treturn vNode;\n\t\t}\n\n\t\tprotected render(): DNode {\n\t\t\tif (this._widgetInstance) {\n\t\t\t\tthis._widgetInstance.setProperties({\n\t\t\t\t\tkey: 'root',\n\t\t\t\t\t...this._widgetInstance.properties,\n\t\t\t\t\t...this.properties\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn v(domNode.tagName, {});\n\t\t}\n\t};\n}\n\nfunction getWidgetPropertyFromAttribute(\n\tattributeName: string,\n\tattributeValue: string | null,\n\tdescriptor: CustomElementAttributeDescriptor\n): [string, any] {\n\tlet { propertyName = attributeName, value = attributeValue } = descriptor;\n\n\tif (typeof value === 'function') {\n\t\tvalue = value(attributeValue);\n\t}\n\n\treturn [propertyName, value];\n}\n\nexport let customEventClass = global.CustomEvent;\n\nif (typeof customEventClass !== 'function') {\n\tconst customEvent = function(event: string, params: any) {\n\t\tparams = params || { bubbles: false, cancelable: false, detail: undefined };\n\t\tconst evt = document.createEvent('CustomEvent');\n\t\tevt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n\t\treturn evt;\n\t};\n\n\tif (global.Event) {\n\t\tcustomEvent.prototype = global.Event.prototype;\n\t}\n\n\tcustomEventClass = customEvent;\n}\n\n/**\n * Called by HTMLElement subclass to initialize itself with the appropriate attributes/properties/events.\n *\n * @param element The element to initialize.\n */\nexport function initializeElement(element: CustomElement) {\n\tlet initialProperties: any = {};\n\n\tconst {\n\t\tchildrenType = ChildrenType.DOJO,\n\t\tattributes = [],\n\t\tevents = [],\n\t\tproperties = [],\n\t\tinitialization\n\t} = element.getDescriptor();\n\n\tattributes.forEach((attribute) => {\n\t\tconst attributeName = attribute.attributeName;\n\n\t\tconst [propertyName, propertyValue] = getWidgetPropertyFromAttribute(\n\t\t\tattributeName,\n\t\t\telement.getAttribute(attributeName.toLowerCase()),\n\t\t\tattribute\n\t\t);\n\t\tinitialProperties[propertyName] = propertyValue;\n\t});\n\n\tlet customProperties: PropertyDescriptorMap = {};\n\n\tattributes.reduce((properties, attribute) => {\n\t\tconst { propertyName = attribute.attributeName } = attribute;\n\n\t\tproperties[propertyName] = {\n\t\t\tget() {\n\t\t\t\treturn element.getWidgetInstance().properties[propertyName];\n\t\t\t},\n\t\t\tset(value: any) {\n\t\t\t\tconst [propertyName, propertyValue] = getWidgetPropertyFromAttribute(\n\t\t\t\t\tattribute.attributeName,\n\t\t\t\t\tvalue,\n\t\t\t\t\tattribute\n\t\t\t\t);\n\t\t\t\telement.getWidgetInstance().setProperties(\n\t\t\t\t\tassign({}, element.getWidgetInstance().properties, {\n\t\t\t\t\t\t[propertyName]: propertyValue\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\t\t};\n\n\t\treturn properties;\n\t}, customProperties);\n\n\tproperties.reduce((properties, property) => {\n\t\tconst { propertyName, getValue, setValue } = property;\n\t\tconst { widgetPropertyName = propertyName } = property;\n\n\t\tproperties[propertyName] = {\n\t\t\tget() {\n\t\t\t\tconst value = element.getWidgetInstance().properties[widgetPropertyName];\n\t\t\t\treturn getValue ? getValue(value) : value;\n\t\t\t},\n\n\t\t\tset(value: any) {\n\t\t\t\telement.getWidgetInstance().setProperties(\n\t\t\t\t\tassign({}, element.getWidgetInstance().properties, {\n\t\t\t\t\t\t[widgetPropertyName]: setValue ? setValue(value) : value\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\t\t};\n\n\t\treturn properties;\n\t}, customProperties);\n\n\tObject.defineProperties(element, customProperties);\n\n\t// define events\n\tevents.forEach((event) => {\n\t\tconst { propertyName, eventName } = event;\n\n\t\tinitialProperties[propertyName] = (event: any) => {\n\t\t\telement.dispatchEvent(\n\t\t\t\tnew customEventClass(eventName, {\n\t\t\t\t\tbubbles: false,\n\t\t\t\t\tdetail: event\n\t\t\t\t})\n\t\t\t);\n\t\t};\n\t});\n\n\tif (initialization) {\n\t\tinitialization.call(element, initialProperties);\n\t}\n\n\tconst projector = ProjectorMixin(element.getWidgetConstructor());\n\tconst widgetInstance = new projector();\n\n\twidgetInstance.setProperties(initialProperties);\n\telement.setWidgetInstance(widgetInstance);\n\n\treturn function() {\n\t\tlet children: DNode[] = [];\n\t\tlet elementChildren = arrayFrom(element.children) as CustomElement[];\n\n\t\telementChildren.forEach((childNode: CustomElement, index: number) => {\n\t\t\tconst properties = { key: `child-${index}` };\n\t\t\tif (childrenType === ChildrenType.DOJO) {\n\t\t\t\tchildren.push(w(DomToWidgetWrapper(childNode), properties));\n\t\t\t} else {\n\t\t\t\tchildren.push(w(DomWrapper(childNode), properties));\n\t\t\t}\n\t\t});\n\t\telementChildren.forEach((childNode: Element) => {\n\t\t\telement.removeChild(childNode);\n\t\t});\n\n\t\twidgetInstance.setChildren(children);\n\t\twidgetInstance.append(element);\n\t};\n}\n\n/**\n * Called by HTMLElement subclass when an HTML attribute has changed.\n *\n * @param element     The element whose attributes are being watched\n * @param name        The name of the attribute\n * @param newValue    The new value of the attribute\n * @param oldValue    The old value of the attribute\n */\nexport function handleAttributeChanged(\n\telement: CustomElement,\n\tname: string,\n\tnewValue: string | null,\n\toldValue: string | null\n) {\n\tconst attributes = element.getDescriptor().attributes || [];\n\n\tattributes.forEach((attribute) => {\n\t\tconst { attributeName } = attribute;\n\n\t\tif (attributeName.toLowerCase() === name.toLowerCase()) {\n\t\t\tconst [propertyName, propertyValue] = getWidgetPropertyFromAttribute(attributeName, newValue, attribute);\n\t\t\telement\n\t\t\t\t.getWidgetInstance()\n\t\t\t\t.setProperties(assign({}, element.getWidgetInstance().properties, { [propertyName]: propertyValue }));\n\t\t}\n\t});\n}\n"]}