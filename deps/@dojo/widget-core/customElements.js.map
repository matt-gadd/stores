{"version":3,"file":"customElements.js","sourceRoot":"","sources":["customElements.ts"],"names":[],"mappings":"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","sourcesContent":["import { assign } from '@dojo/core/lang';\nimport { from as arrayFrom } from '@dojo/shim/array';\nimport global from '@dojo/shim/global';\nimport { Constructor, DNode, VNode, VNodeProperties, WidgetProperties } from './interfaces';\nimport { WidgetBase } from './WidgetBase';\nimport { v, w } from './d';\nimport { DomWrapper } from './util/DomWrapper';\nimport { ProjectorMixin } from './mixins/Projector';\nimport { InternalVNode } from './vdom';\n\n/**\n * @type CustomElementAttributeDescriptor\n *\n * Describes a custom element attribute\n *\n * @property attributeName   The name of the attribute on the DOM element\n * @property propertyName    The name of the property on the widget\n * @property value           A function that takes a string or null value, and returns a new value. The widget's property will be set to the new value.\n */\nexport interface CustomElementAttributeDescriptor {\n\tattributeName: string;\n\tpropertyName?: string;\n\tvalue?: (value: string | null) => any;\n}\n\n/**\n * @type CustomElementPropertyDescriptor\n *\n * Describes a widget property exposed via a custom element\n *\n * @property propertyName        The name of the property on the DOM element\n * @property widgetPropertyName  The name of the property on the widget\n * @property getValue            A transformation function on the widget's property value\n * @property setValue            A transformation function on the DOM elements property value\n */\nexport interface CustomElementPropertyDescriptor {\n\tpropertyName: string;\n\twidgetPropertyName?: string;\n\tgetValue?: (value: any) => any;\n\tsetValue?: (value: any) => any;\n}\n\n/**\n * @type CustomElementEventDescriptor\n *\n * Describes a custom element event\n *\n * @property propertyName    The name of the property on the widget that takes a function\n * @property eventName       The type of the event to emit (it will be a CustomEvent object of this type)\n */\nexport interface CustomElementEventDescriptor {\n\tpropertyName: string;\n\teventName: string;\n}\n\n/**\n * Defines a custom element initializing function. Passes in initial properties so they can be extended\n * by the initializer.\n */\nexport interface CustomElementInitializer {\n\t(properties: WidgetProperties): void;\n}\n\nexport enum ChildrenType {\n\tDOJO = 'DOJO',\n\tELEMENT = 'ELEMENT'\n}\n\n/**\n * @type CustomElementDescriptor\n *\n * Describes a custom element.\n *\n * @property tagName             The tag name to register this widget under. Tag names must contain a \"-\"\n * @property widgetConstructor   widget Constructor that will return the widget to be wrapped in a custom element\n * @property attributes          A list of attributes to define on this element\n * @property properties          A list of properties to define on this element\n * @property events              A list of events to expose on this element\n * @property initialization      A method to run to set custom properties on the wrapped widget\n */\nexport interface CustomElementDescriptor {\n\t/**\n\t * The name of the custom element tag\n\t */\n\ttagName: string;\n\n\t/**\n\t * Widget constructor that will create the widget\n\t */\n\twidgetConstructor: Constructor<WidgetBase<WidgetProperties>>;\n\n\t/**\n\t * List of attributes on the custom element to map to widget properties\n\t */\n\tattributes?: CustomElementAttributeDescriptor[];\n\n\t/**\n\t * List of widget properties to expose as properties on the custom element\n\t */\n\tproperties?: CustomElementPropertyDescriptor[];\n\n\t/**\n\t * List of events to expose\n\t */\n\tevents?: CustomElementEventDescriptor[];\n\n\t/**\n\t * Initialization function called before the widget is created (for custom property setting)\n\t */\n\tinitialization?: CustomElementInitializer;\n\n\t/**\n\t * The type of children that the custom element accepts\n\t */\n\tchildrenType?: ChildrenType;\n}\n\n/**\n * @type CustomElement\n *\n * A custom element extends upon a regular HTMLElement but adds fields for describing and wrapping a widget constructor.\n *\n * @property getWidgetConstructor Return the widget constructor for this element\n * @property getDescriptor        Return the element descriptor for this element\n * @property getWidgetInstance    Return the widget instance that this element wraps\n * @property setWidgetInstance    Set the widget instance for this element\n */\nexport interface CustomElement extends HTMLElement {\n\tgetWidgetConstructor(): Constructor<WidgetBase<WidgetProperties>>;\n\tgetDescriptor(): CustomElementDescriptor;\n\tgetWidgetInstance(): ProjectorMixin<any>;\n\tsetWidgetInstance(instance: ProjectorMixin<any>): void;\n}\n\n/**\n * Properties for DomToWidgetWrapper\n */\nexport type DomToWidgetWrapperProperties = VNodeProperties & WidgetProperties;\n\n/**\n * DomToWidgetWrapper type\n */\nexport type DomToWidgetWrapper = Constructor<WidgetBase<DomToWidgetWrapperProperties>>;\n\n/**\n * DomToWidgetWrapper HOC\n *\n * @param domNode The dom node to wrap\n */\nexport function DomToWidgetWrapper(domNode: CustomElement): DomToWidgetWrapper {\n\treturn class DomToWidgetWrapper extends WidgetBase<DomToWidgetWrapperProperties> {\n\t\tprivate _widgetInstance: ProjectorMixin<any>;\n\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tdomNode.addEventListener('connected', () => {\n\t\t\t\tthis._widgetInstance = domNode.getWidgetInstance();\n\t\t\t\tthis.invalidate();\n\t\t\t});\n\t\t}\n\n\t\tpublic __render__(): VNode {\n\t\t\tconst vNode = super.__render__() as InternalVNode;\n\t\t\tvNode.domNode = domNode;\n\t\t\treturn vNode;\n\t\t}\n\n\t\tprotected render(): DNode {\n\t\t\tif (this._widgetInstance) {\n\t\t\t\tthis._widgetInstance.setProperties({\n\t\t\t\t\tkey: 'root',\n\t\t\t\t\t...this._widgetInstance.properties,\n\t\t\t\t\t...this.properties\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn v(domNode.tagName, {});\n\t\t}\n\t};\n}\n\nfunction getWidgetPropertyFromAttribute(\n\tattributeName: string,\n\tattributeValue: string | null,\n\tdescriptor: CustomElementAttributeDescriptor\n): [string, any] {\n\tlet { propertyName = attributeName, value = attributeValue } = descriptor;\n\n\tif (typeof value === 'function') {\n\t\tvalue = value(attributeValue);\n\t}\n\n\treturn [propertyName, value];\n}\n\nexport let customEventClass = global.CustomEvent;\n\nif (typeof customEventClass !== 'function') {\n\tconst customEvent = function(event: string, params: any) {\n\t\tparams = params || { bubbles: false, cancelable: false, detail: undefined };\n\t\tconst evt = document.createEvent('CustomEvent');\n\t\tevt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n\t\treturn evt;\n\t};\n\n\tif (global.Event) {\n\t\tcustomEvent.prototype = global.Event.prototype;\n\t}\n\n\tcustomEventClass = customEvent;\n}\n\n/**\n * Called by HTMLElement subclass to initialize itself with the appropriate attributes/properties/events.\n *\n * @param element The element to initialize.\n */\nexport function initializeElement(element: CustomElement) {\n\tlet initialProperties: any = {};\n\n\tconst {\n\t\tchildrenType = ChildrenType.DOJO,\n\t\tattributes = [],\n\t\tevents = [],\n\t\tproperties = [],\n\t\tinitialization\n\t} = element.getDescriptor();\n\n\tattributes.forEach((attribute) => {\n\t\tconst attributeName = attribute.attributeName;\n\n\t\tconst [propertyName, propertyValue] = getWidgetPropertyFromAttribute(\n\t\t\tattributeName,\n\t\t\telement.getAttribute(attributeName.toLowerCase()),\n\t\t\tattribute\n\t\t);\n\t\tinitialProperties[propertyName] = propertyValue;\n\t});\n\n\tlet customProperties: PropertyDescriptorMap = {};\n\n\tattributes.reduce((properties, attribute) => {\n\t\tconst { propertyName = attribute.attributeName } = attribute;\n\n\t\tproperties[propertyName] = {\n\t\t\tget() {\n\t\t\t\treturn element.getWidgetInstance().properties[propertyName];\n\t\t\t},\n\t\t\tset(value: any) {\n\t\t\t\tconst [propertyName, propertyValue] = getWidgetPropertyFromAttribute(\n\t\t\t\t\tattribute.attributeName,\n\t\t\t\t\tvalue,\n\t\t\t\t\tattribute\n\t\t\t\t);\n\t\t\t\telement.getWidgetInstance().setProperties(\n\t\t\t\t\tassign({}, element.getWidgetInstance().properties, {\n\t\t\t\t\t\t[propertyName]: propertyValue\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\t\t};\n\n\t\treturn properties;\n\t}, customProperties);\n\n\tproperties.reduce((properties, property) => {\n\t\tconst { propertyName, getValue, setValue } = property;\n\t\tconst { widgetPropertyName = propertyName } = property;\n\n\t\tproperties[propertyName] = {\n\t\t\tget() {\n\t\t\t\tconst value = element.getWidgetInstance().properties[widgetPropertyName];\n\t\t\t\treturn getValue ? getValue(value) : value;\n\t\t\t},\n\n\t\t\tset(value: any) {\n\t\t\t\telement.getWidgetInstance().setProperties(\n\t\t\t\t\tassign({}, element.getWidgetInstance().properties, {\n\t\t\t\t\t\t[widgetPropertyName]: setValue ? setValue(value) : value\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\t\t};\n\n\t\treturn properties;\n\t}, customProperties);\n\n\tObject.defineProperties(element, customProperties);\n\n\t// define events\n\tevents.forEach((event) => {\n\t\tconst { propertyName, eventName } = event;\n\n\t\tinitialProperties[propertyName] = (event: any) => {\n\t\t\telement.dispatchEvent(\n\t\t\t\tnew customEventClass(eventName, {\n\t\t\t\t\tbubbles: false,\n\t\t\t\t\tdetail: event\n\t\t\t\t})\n\t\t\t);\n\t\t};\n\t});\n\n\tif (initialization) {\n\t\tinitialization.call(element, initialProperties);\n\t}\n\n\tconst projector = ProjectorMixin(element.getWidgetConstructor());\n\tconst widgetInstance = new projector();\n\n\twidgetInstance.setProperties(initialProperties);\n\telement.setWidgetInstance(widgetInstance);\n\n\treturn function() {\n\t\tlet children: DNode[] = [];\n\t\tlet elementChildren = arrayFrom(element.children) as CustomElement[];\n\n\t\telementChildren.forEach((childNode: CustomElement, index: number) => {\n\t\t\tconst properties = { key: `child-${index}` };\n\t\t\tif (childrenType === ChildrenType.DOJO) {\n\t\t\t\tchildren.push(w(DomToWidgetWrapper(childNode), properties));\n\t\t\t} else {\n\t\t\t\tchildren.push(w(DomWrapper(childNode), properties));\n\t\t\t}\n\t\t});\n\t\telementChildren.forEach((childNode: Element) => {\n\t\t\telement.removeChild(childNode);\n\t\t});\n\n\t\twidgetInstance.setChildren(children);\n\t\twidgetInstance.append(element);\n\t};\n}\n\n/**\n * Called by HTMLElement subclass when an HTML attribute has changed.\n *\n * @param element     The element whose attributes are being watched\n * @param name        The name of the attribute\n * @param newValue    The new value of the attribute\n * @param oldValue    The old value of the attribute\n */\nexport function handleAttributeChanged(\n\telement: CustomElement,\n\tname: string,\n\tnewValue: string | null,\n\toldValue: string | null\n) {\n\tconst attributes = element.getDescriptor().attributes || [];\n\n\tattributes.forEach((attribute) => {\n\t\tconst { attributeName } = attribute;\n\n\t\tif (attributeName.toLowerCase() === name.toLowerCase()) {\n\t\t\tconst [propertyName, propertyValue] = getWidgetPropertyFromAttribute(attributeName, newValue, attribute);\n\t\t\telement\n\t\t\t\t.getWidgetInstance()\n\t\t\t\t.setProperties(assign({}, element.getWidgetInstance().properties, { [propertyName]: propertyValue }));\n\t\t}\n\t});\n}\n"]}